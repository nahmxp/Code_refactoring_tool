# -*- coding: utf-8 -*-
"""Data_clumps_detector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JR7sraDZB4AbKA1KHtVxy0L3Dm-hgvA4
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install astor

import ast
import astor
from collections import defaultdict

class DataClumpDetector(ast.NodeVisitor):
    def __init__(self):
        self.attribute_counts = defaultdict(list)

    def visit_Attribute(self, node):
        if isinstance(node.value, ast.Name):
            self.attribute_counts[node.value.id].append(node.attr)

    def get_potential_data_clumps(self):
        potential_clumps = []
        for key, attributes in self.attribute_counts.items():
            if len(attributes) > 1:
                potential_clumps.append((key, attributes))
        return potential_clumps

def refactor_data_clumps(source_code, potential_clumps):
    tree = ast.parse(source_code)
    for key, attributes in potential_clumps:
        # Replace attribute access with a local variable
        new_variable = ast.Name(id=f'_{key}_data_clump', ctx=ast.Store())
        tree = ast.fix_missing_locations(tree)
        for node in ast.walk(tree):
            if isinstance(node, ast.Attribute) and node.value.id == key:
                node.value = new_variable

    return astor.to_source(tree)

def main():
    # Replace 'your_code.py' with the path to your Python file
    with open('/content/temp_data_clumps_1.py', 'r') as file:
        source_code = file.read()

    detector = DataClumpDetector()
    detector.visit(ast.parse(source_code))
    potential_clumps = detector.get_potential_data_clumps()

    if potential_clumps:
        refactored_code = refactor_data_clumps(source_code, potential_clumps)
        with open('refactored_code.py', 'w') as file:
            file.write(refactored_code)
        print("Refactored code saved to 'refactored_code.py'")
    else:
        print("No potential data clumps detected.")

if __name__ == "__main__":
    main()